#include  <iostream>
#include<windows.h>

using namespace std;
class Point
{
    int x, y;
public:

    friend istream& operator >> (istream& in, Point& p);    //重载运算符">>"
    friend ostream& operator << (ostream& out, Point& p);  //重载运算符"<<"
    friend Point operator+(const Point& lhs, const Point& rhs);
    friend Point operator-(const Point& lhs, const Point& rhs);
    friend Point operator*(const Point& lhs, const Point& rhs);
    friend Point operator/(const Point& lhs, const Point& rhs);
};
    int *xloc, *yloc;
istream& operator >> (istream& in, Point& p)
{
    inputX:
    cout << "请输入x, y的值：" << endl;
    cout << "x＝";
    if (!(in >> p.x))
    {
		in.clear();
		in.sync();
		cout << "Input rejected. Reson: Data overflow would occur." << endl;
		goto inputX;
	}
    inputY:
    cout << "y＝";
    if (!(in >> p.y))
    {
        in.clear();
        in.sync();
        cout << "Input rejected. Reson: Data Overflow would occur." << endl;
        goto inputY;
    }
    xloc=&p.x;
    cout << xloc<<endl<<&p.x << endl;
    yloc=&p.y;
    return in;
}
ostream& operator << (ostream& out, Point& p)
{
    out << "输出x, y的值" << endl;
    out << "x＝" << p.x << "   y=" << p.y << endl;
    return out;
}

void compute()
{
    char formular[4];
    int *loc[3];

        cout << "Set up a formular to operate." << endl;
        cout << " (To) =  (From)  (With)  (By)" << endl;
        cout << "To ( [x] / [y] ) :"; cin >> formular[0];
        cout << "From ( [x] / [y] ) :"; cin >> formular[1];
        cout << "With ( [+] / [-] / [*] / [/] ) :"; cin >> formular[3];
        cout << "By ( [x] / [y]) :"; cin >> formular[2];
        cout << "Foemular [ " << formular[0] << " = " << formular[1] << " " << formular[3] << formular[2] << " ] ";
        if (((formular[0] == 'x' || formular[0] == 'y') && (formular[1] == 'x' || formular[1] == 'y') && (formular[2] == 'x' || formular[2] == 'y') && (formular[3] == '+' || formular[3] == '-' || formular[3] == '*' || formular[3] == '÷')));
        {
			cout << "would not be compute. Reason: Invalid formular." << endl;

		}
        if (formular[0] == 'x')
            loc[0] = xloc;
        else loc[0] = yloc;   
        if (formular[1] =='x')
			loc[1]  =xloc;
		else loc[1]  =yloc;
        if (formular[2] == 'x')
            loc[2] = xloc;
        else loc[2] = yloc;

        switch (formular[3])
        {
        case '+':
            *loc[0] = *loc[1] + *loc[2];
            break;
        case '-':
            *loc[0] = *loc[1] - *loc[2];
            break;
        case '*':
            *loc[0] = *loc[1] * *loc[2];
			break;
        case '/':
	    	*loc[0] = *loc[1] / *loc[2];
	    	break;
        }
    
}

Point operator+(const Point& lhs, const Point& rhs)
{
    cout << "plus." << endl;
    Point temp;
    temp = lhs + rhs;
	return temp;
}

Point operator-(const Point& lhs, const Point& rhs)
{
    cout << "minus." << endl;
	Point temp;
	temp = lhs - rhs;
	return temp;
}

Point operator*(const Point& lhs, const Point& rhs)
{
    cout << "times." << endl;
    Point temp;
    temp = lhs * rhs;
    return temp;
}

Point operator/(const Point& lhs, const Point& rhs)
{

    Point temp;
    if (rhs.x == 0 || rhs.y == 0)
    {
		cout << "Divisor can not be zero." << endl;
		return temp;
	}
    temp = lhs / rhs;
    return temp;
}

int main()
{
    Point P;
    cin >> P;
    compute();
    cout << P;
}
